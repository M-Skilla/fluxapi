name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  release:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
          
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
          
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
        
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Package application (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: pnpm run build:linux
        
      - name: Package application (Windows)
        if: matrix.os == 'windows-latest'
        run: pnpm run build:win
        
      - name: Upload Linux artifacts
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: |
            dist/*.AppImage
            dist/*.deb
            dist/*.snap
            
      - name: Upload Windows artifacts
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: |
            dist/*.exe

  create-release:
    needs: release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux-build
          path: ./dist/linux
          
      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-build
          path: ./dist/windows
          
      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi
          
      - name: List artifacts
        run: |
          echo "Linux artifacts:"
          find ./dist/linux -type f -name "*" || echo "No Linux artifacts found"
          echo "Windows artifacts:"
          find ./dist/windows -type f -name "*" || echo "No Windows artifacts found"
          
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: FluxAPI ${{ steps.version.outputs.version }}
          body: |
            ## FluxAPI ${{ steps.version.outputs.version }}
            
            ### Downloads
            
            #### Windows
            - **Setup Executable**: Recommended installer for Windows users
            
            #### Linux
            - **AppImage**: Universal Linux package (recommended)
            - **DEB Package**: For Debian/Ubuntu systems  
            - **Snap Package**: For systems with snap support
            
            ### Changes
            - Release notes for ${{ steps.version.outputs.version }}
            
            ### System Requirements
            - **Windows**: Windows 10 or later
            - **Linux**: Most modern distributions with X11 or Wayland
            
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, 'beta') || contains(steps.version.outputs.version, 'alpha') }}
          files: |
            ./dist/linux/*
            ./dist/windows/*
